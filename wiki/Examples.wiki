== More Simple Examples ==

 * DOM Elements builder
{{{
public class FirstDiv extends CommonElements {
	static {
		NodeBuilder div = $DIV()
			.text("This method wil add a text-node to div")
			.add(
				$P().text("Adding <p> with text in it")
				.styleColor("red")
				.styleBorder("1px solid black")
			)
			.add(
				$SPAN().innerHTML("Adding <b>html</b> using innerHTML, but this is not good way")
			)
		;

		document.body.appendChild(EL("h2").text(ajaxName(FirstDiv.class) + " example").node);
		document.body.appendChild(div.node);
	}
}
}}}

 * Timer
{{{
/** extends from CommonElements only for simplier access to static fields and methods */
public class Timer extends CommonElements {
	/** this is an entry point */
	static {
		// creating DIV node wrapper
		final NodeBuilder div = $DIV();
		
		// creating javascript timer with delegate
		setInterval(new VoidDelegate<IntervalIdentifier>() {
			public void voidDelegate(IntervalIdentifier iid) {
				div.removeChilds().text(new Date().toString());
			}
		}, 1000);
		
		// append node to document.body
		document.body.appendChild(div.node);
	}
}
}}}

* Event and call backs examples
{{{
public class EventExample extends CommonElements implements DOMEventCallback {
    private NoChildNodeBuilder input;

    private NodeBuilder draw() {
        return $DIV()
            // you can use existing instance as callback
            .add(input = $INPUT().onChange(this))
            .BR()
            // or create new anonym class
            .add($BTN("Push me", new DOMEventCallback() {
                public boolean delegate(Node n) {
                    window.alert(input.valueAsStr());
                    return false;
                }
            }))
        ;
    }

    // input onChange
    public boolean delegate(Node n) {
        window.alert("input.onChange: " + n.value);
        return true; // we need it
    }

    static {
        document.body.appendChild(EL("h2").text(ajaxName(EventExample.class) + " example").node);
        document.body.appendChild(new EventExample().draw().node);
    }
}
}}}